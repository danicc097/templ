package testgousage

import "fmt"

const a = "a"
const b = "b"
const c = "c"

var items = [...]int{1, 2, 3}

func ab() string {
	return `"ab"`
}

/*
rawgo syntax in base templ not experimental anymore.
can adopt the same in gotempl expressions for consistency
*/

gotempl Package(paramA string, paramB int) #{
	/*
  Package testgousage.
  */
  package testgousage

  // A comment that should be rendered
  /* Another comment that should be rendered
  */
	{{ /* TODO: use GenerationEvent to gofumpt, dont change _templ.go codegen */ }}
	{{ /* TODO: dont render extra spaces in new lines */ }}
	{{ /**/ }}
	{{ /* this should not be printed */ }}
	{{ /* this should not be printed */
  y := "y" }}
	{{ _ = paramA }}
	// comment with %{ "var" }% with space
  // comment with%{ "var" }%without space
	%{ "const _ab = " }% "ab"
	{{ first := items[0] }}
	{{ for _, i := range items }}
		{{ /* comment in with ignored syntax %{ "var" }%  {{ a := "" }} */ }}
		%{ fmt.Sprintf("// %s-%d-%d-%s\n", ab(), i, first, y) }%
		{{ for _, j := range items }}
			%{ fmt.Sprintf("// nested %d\n", j) }%
		{{ end }}
	{{ end }}
	{{ if true }}
		%{ "var abc = \"abc\"\n" }%
	{{ else if first == 999 }}
		%{ "should never print this" }%
	{{ else }}
		%{ "should never print this either" }%
	{{ end }}
	// FIXME: should respect indent for Text nodes inside gotempl.
  // we will apply gofumpt to output anyway
  func main() {
    const z = "z"
    for i := 0; i < 3; i++ { println("z") }
    for i := 0; i < 3; i++ {
      println("z")
    }
  }

  type A struct {
    a string
  }
}#

// Combine all tests.
templ TestComponent() {
	@Package("a", 1)
}
